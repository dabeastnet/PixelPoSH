<#
.SYNOPSIS
    PixelPoSH (PSSVG Edition)

.DESCRIPTION
    This module generates random or selected SVG backgrounds using the PSSVG module
    instead of System.Drawing.  Supported patterns include bubbles, concentric
    circles, squares, stripes, and waves.  Optional overlay text can be added
    with a border.  The generated files are written as .svg files.
    Author:Dieter Beckers 2024
    https://github.com/dabeastnet

.NOTES
    Requires: PSSVG
#>

# Require PSSVG so the commands are available when the module is imported
# This also alerts users if they haven't installed the dependency.
#requires -Modules PSSVG

function New-RandomImage {
    <#
    .SYNOPSIS
        Generates customizable graphical backgrounds and saves them as an image.

    .DESCRIPTION
        New-RandomImage creates a random or specific graphical design based on user-defined parameters using System.Drawing in .NET. It supports various graphical patterns such as bubbles, concentric circles, stripes, squares and 2 wave patterns. The function allows the addition of optional text and saves the result to a specified path.
        Author:Dieter Beckers 2024
        https://github.com/dabeastnet

    .PARAMETER ImageWidth
            Specifies the width of the generated image. Default is 800.

    .PARAMETER ImageHeight
            Specifies the height of the generated image. Default is 600.

    .PARAMETER Path
            Defines the file path where the image will be saved. Default is "C:\temp\Background.png".

    .PARAMETER Text
            Optional text that can be added to the image.

    .PARAMETER TextSize
            Specifies textsize of the text parameter. Default is 40.

    .PARAMETER TextColor
            Specifies the textcolor in HEX format of the text parameter. You can specify this with or without the '#'. Default is #FFFFFF (white).

    .PARAMETER Bubble
            A switch to select the bubble pattern.

    .PARAMETER Circle
            A switch to select the concentric circle pattern.

    .PARAMETER Stripe
            A switch to select the stripe pattern.

    .PARAMETER Square
            A switch to select the square pattern.

    .PARAMETER PaletteWave
            A switch to select the wave pattern based on the palette.

    .PARAMETER GradientWave
            A switch to select the  wave pattern, in a gradient.        

    .EXAMPLE
        New-RandomImage -ImageWidth 1920 -ImageHeight 1080 -Path "c:\temp\test.svg" -Text "Sample Text" -Square

        This example generates a 1920x1080 image with a square pattern and the text "Sample Text", saved to "c:\temp\test.svg"

    .NOTES
        Version history

        V1.0: 
        -Initial release with System.Drawing
        -Backgrounds: Bubble, Circle, Square, Stripe, Gradient wave, Palette wave
        -Support for multiline text

        V2.0
        - Complete rewrite to support Cross-platform compatibility
        - SVG based : this script now requires the PSSVG module to be Installed.
        - For PNG generation it will now choose a renderer in this order: rsvg-convert -> magick (ImageMagick) -> inkscape
        - New background types: Lowpoly Gradient and Lowpoly Palette
        - Docker image support
        - Ansible support

    #>
    [CmdletBinding()]
    param (
        [int]$ImageWidth = 800,
        [int]$ImageHeight = 600,
        [string]$Path = ([System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), 'Background.svg')),
        [string]$Text,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF',
        [switch]$Bubble,
        [switch]$Circle,
        [switch]$Square,
        [switch]$Stripe,
        [switch]$PaletteWave,
        [switch]$GradientWave,
        [switch]$LowPolyGradient,
        [switch]$LowPolyPalette,
        [string]$PngPath, #Patch to save the PNG to
        [switch]$RasterizeToPng, #Switch to rasterize
        [string]$PngBackground = 'none'   # or '#ffffff' if you want opaque PNGs by default
    )

    # Ensure the output extension is .svg
    if ([System.IO.Path]::GetExtension($Path) -ne '.svg') {
        $Path = [System.IO.Path]::ChangeExtension($Path, '.svg')
    }

    # Determine which patterns are active.  If none are specified, all are valid.
    $active = @()
    if ($Bubble)       { $active += 'Bubble' }
    if ($Circle)       { $active += 'Circle' }
    if ($Square)       { $active += 'Square' }
    if ($Stripe)       { $active += 'Stripe' }
    if ($PaletteWave)  { $active += 'PaletteWave' }
    if ($GradientWave) { $active += 'GradientWave' }
    if ($LowPolyGradient) { $active += 'LowPolyGradient' }
    if ($LowPolyPalette) { $active += 'LowPolyPalette' }
    if ($active.Count -eq 0) {
        $active = @('Bubble','Circle','Square','Stripe','PaletteWave','GradientWave')
    }

    # Choose one pattern at random
    $selected = Get-Random -InputObject $active

    # Retrieve a palette (array of int[3])
    $palette = Get-ColorPalette

    #Common params
    $commonParam = @{
        ImageWidth   = $ImageWidth 
        ImageHeight  = $ImageHeight
        ColorPalette = $palette
        Text         = $Text 
        TextSize     = $TextSize
        TextColor    = $TextColor
    }

    # Generate SVG elements for the chosen pattern
    switch ($selected) {
        'Bubble' {
            $svgContent = New-BubbleBackgroundSVG  @commonParam
        }

        'Circle' {
            $svgContent = New-ConcentricCirclesSVG @commonParam
        }

        'Square' {
            $svgContent = New-SquaresSVG @commonParam
        }

        'Stripe' {
            $svgContent = New-StripesSVG @commonParam
        }

        'PaletteWave' {
            $svgContent = New-WavesSVG @commonParam
        }

        'GradientWave' {
            $p = $commonParam.Clone()
            $p.Gradient = $true          # switch param -> include only when needed
            $svgContent = New-WavesSVG @p
        }

        'LowPolyGradient' {
            $p = $commonParam.Clone()
            $p.PointCount      = 450
            $p.UseGradient     = $true
            $p.ColorNoise      = 0.08
            $p.AddBorderPoints = $true
            $svgContent = New-LowPolySVG @p
        }

        'LowPolyPalette' {
            $p = $commonParam.Clone()
            $p.PointCount      = 420
            $p.PaletteNoise    = 0.12
            $p.AddBorderPoints = $true
            $svgContent = New-LowPolySVG @p
        }
    }

    # Build a proper viewBox string and include width/height attributes.  The viewBox must
    # contain four numbers separated by whitespace; using commas will cause the
    # width and height values to be concatenated which makes the artwork appear invisible.
    $vb = "0 0 $ImageWidth $ImageHeight"
    svg -Content $svgContent -ViewBox $vb -Width $ImageWidth -Height $ImageHeight -OutputPath $Path

    #Export png

    if ($RasterizeToPng -or $PngPath) {
    if (-not $PngPath) {
        $PngPath = [System.IO.Path]::ChangeExtension($Path, '.png')
    }
    Convert-SvgToPng -SvgPath $Path -PngPath $PngPath -Width $ImageWidth -Height $ImageHeight -Background $PngBackground
}
}

Export-ModuleMember -Function New-RandomImage

#region Helper functions

function Convert-HexToRGB {
    <#
    .SYNOPSIS
        Convert a hex colour string (#RRGGBB) into an object with R, G, B values.
    #>
    param ([Parameter(Mandatory)][string]$HexColor)

    $hex = $HexColor.TrimStart('#')
    if ($hex.Length -ne 6) { throw "Invalid hex colour '$HexColor' (expect #RRGGBB)" }
    return [PSCustomObject]@{
        Red   = [Convert]::ToInt32($hex.Substring(0,2),16)
        Green = [Convert]::ToInt32($hex.Substring(2,2),16)
        Blue  = [Convert]::ToInt32($hex.Substring(4,2),16)
    }
}

function Convert-RGBToHex {
        <#
    .SYNOPSIS
        Convert a hex colour string (#RRGGBB) into an object with R, G, B values.
    #>
  param([double]$R,[double]$G,[double]$B)

  $toByte = { param([double]$v) [byte]([math]::Max(0,[math]::Min(255,[int][math]::Round($v)))) }
  $rb = & $toByte $R; $gb = & $toByte $G; $bb = & $toByte $B
  return '#{0:X2}{1:X2}{2:X2}' -f $rb,$gb,$bb
}

function Get-ColorPalette {
    #Check if API is available
    if (Test-Connection "colormind.io" -Count 1 -ErrorAction SilentlyContinue) {
        # Define the API endpoint
        $uri = "http://colormind.io/api/"

        # Define the body of the request
        $body = @{
            model = "default"
        } | ConvertTo-Json

        # Make the POST request
        $Palette = Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType "application/json"
        if ($null -ne $Palette) {
            #Return result if successful
            return $Palette.result
        }
    }

    #Static list of 100 palettes
    #region B64
    $B64Palettes = "" 
    #endregion B64
    #Decode palette list to JSON
    $Decodedpalettes = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($B64Palettes)) | ConvertFrom-Json
    
    return ($Decodedpalettes[(Get-Random -Minimum 0 -Maximum ($Decodedpalettes.count - 1))])

}#Get-ColorPalette

function Convert-SvgToPng {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][string]$SvgPath,
        [Parameter(Mandatory)][string]$PngPath,
        [int]$Width,
        [int]$Height,
        [string]$Background = 'none'   # 'none' for transparent, or '#RRGGBB'
    )

    $rsvg     = Get-Command rsvg-convert  -ErrorAction SilentlyContinue
    $magick   = Get-Command magick        -ErrorAction SilentlyContinue
    $inkscape = Get-Command inkscape      -ErrorAction SilentlyContinue

    if ($rsvg) {
        # Build once, then splat
        $arguments = @(
            $(if ($Width)  { '-w'; $Width })
            $(if ($Height) { '-h'; $Height })
            $(if ($Background -and $Background -ne 'none') { '--background-color'; $Background })
            '-o'
            $PngPath
            $SvgPath
        )

        & $rsvg.Source $arguments
        return
    }


    if ($magick) {
        # Build background args
        $backgroundArgs = if ($Background -eq 'none') {
            @('-background','none')
        } else {
            @('-background', $Background)
        }

        # Build geometry (no null-coalescing so it's 5.1-safe)
        $resizeGeom = $null
        if ($Width -and $Height) {
            $resizeGeom = ('{0}x{1}' -f $Width, $Height)
        } elseif ($Width) {
            $resizeGeom = ('{0}x' -f $Width)
        } elseif ($Height) {
            $resizeGeom = ('x{0}' -f $Height)
        }
        $resizeArgs = if ($resizeGeom) { @('-resize', $resizeGeom) } else { @() }

        # magick input.svg -density 300 [background opts] [-resize WxH] output.png
        $arguments = @(
            $SvgPath
            '-density','300'       # apply on read
            $backgroundArgs
            $resizeArgs
            $PngPath
        )

        & $magick.Source $arguments
        return
    }

    #Try to fix path
    if (-not $inkscape) {
        $candidates = @(
            'C:\Program Files\Inkscape\bin\inkscape.com',
            'C:\Program Files\Inkscape\bin\inkscape.exe',
            '/Applications/Inkscape.app/Contents/MacOS/inkscape',
            '/snap/bin/inkscape'
        ) | Where-Object { Test-Path $_ }
        if ($candidates) {
            $inkscape = @{ Source = $candidates[0] }  # fake object with Source
        }
    }

    if ($inkscape) {
        $arguments = @(
            $SvgPath
            '--export-type=png'
            "--export-filename=$PngPath"
            $(if ($Width)  { "--export-width=$Width" })
            $(if ($Height) { "--export-height=$Height" })
            $(if ($Background -eq 'none') { 
                '--export-background-opacity=0' 
            } elseif ($Background) {
                "--export-background=$Background"
            })
        )

        & $inkscape.Source $arguments
        return
    }


    # flatpak fallback
    $flatpak = Get-Command flatpak -ErrorAction SilentlyContinue
    if ($flatpak) {
        $arguments = @(
            'run', 'org.inkscape.Inkscape'
            $SvgPath
            '--export-type=png'
            "--export-filename=$PngPath"
            $(if ($Width)  { "--export-width=$Width" })
            $(if ($Height) { "--export-height=$Height" })
            $(if ($Background -eq 'none') { 
                '--export-background-opacity=0' 
            } else {
                "--export-background=$Background"
            })
        )

        & $flatpak.Source $arguments

        return
    }


    if($IsLinux){
        throw "No SVG renderer found. Install one of: librsvg (rsvg-convert), ImageMagick (magick), or Inkscape. For example `"sudo apt install librsvg2-bin`""
    }
    elseif($isWindows){
        throw "No SVG renderer found. Install one of: librsvg (rsvg-convert), ImageMagick (magick), or Inkscape. For example `"winget install ImageMagick.ImageMagick`""
    }
    else{
        throw "No SVG renderer found. Install one of: librsvg (rsvg-convert), ImageMagick (magick), or Inkscape."
    }

}


function New-TextSVG {
    param(
        [Parameter(Mandatory)][string]$Text,
        [Parameter(Mandatory)][int]$ImageWidth,
        [Parameter(Mandatory)][int]$ImageHeight,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF',
        [int]$BorderThickness = 3,
        [string]$BorderColor = '#000000'
    )

    # Split into lines. Keep empty lines if the user put them there.
    $lines = $Text -split "`r?`n"
    $lineHeight = [int]([math]::Ceiling($TextSize * 1.2))

    # Start so that the LAST line sits near the bottom-right
    $startY = [int](($ImageHeight * 0.95) - ($lineHeight * ([math]::Max($lines.Count,1) - 1)))
    $x = [int]([double]$ImageWidth * 0.95)


    # Convert colour
    $rgb  = Convert-HexToRGB $TextColor
    $fill = '#{0:X2}{1:X2}{2:X2}' -f $rgb.Red,$rgb.Green,$rgb.Blue

    # Build tspans as real XML nodes (DO NOT stringify)
    $tspans = @()
    for ($i=0; $i -lt $lines.Count; $i++) {
        if ($i -eq 0) {
            # first line at explicit X
            $tspans += (svg.tspan -X $x -Content $lines[$i])
        } else {
            # subsequent lines: reset X and step down by dy
            $tspans += (svg.tspan -X $x -Dy $lineHeight -Content $lines[$i])
        }
    }

    # Keys are parameter names (no leading dashes)
    $textArgs = @{
        X                = $x
        Y                = $startY
        FontFamily       = 'Arial, Helvetica, sans-serif'
        FontSize         = $TextSize
        Fill             = $fill
        Stroke           = $BorderColor
        StrokeWidth      = $BorderThickness
        Style            = 'paint-order: stroke fill; text-rendering:geometricPrecision'
        TextAnchor       = 'end'
        DominantBaseline = 'baseline'
        Content          = $tspans
    }

    svg.text @textArgs


}


function Convert-RGBToHex {
  param([double]$R,[double]$G,[double]$B)
  $toByte = { param([double]$v) [byte]([math]::Max(0,[math]::Min(255,[int][math]::Round($v)))) }
  $rb = & $toByte $R; $gb = & $toByte $G; $bb = & $toByte $B
  '#{0:X2}{1:X2}{2:X2}' -f $rb,$gb,$bb
}

function New-LowPolySVG {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][int]$ImageWidth,
        [Parameter(Mandatory)][int]$ImageHeight,

        # point sampling
        [int]$PointCount = 300,          # increase for denser facets (400-1000 looks great, slower)
        [double]$Jitter = 0.0,           # 0..0.45 extra random jitter around points
        [switch]$AddBorderPoints,        # add a ring of border points to avoid big edge triangles

        # colouring
        [switch]$UseGradient,            # linear gradient across canvas instead of palette
        [string]$GradientStart = '#FAD961',
        [string]$GradientEnd   = '#F76B1C',
        [double]$ColorNoise = 0.07,      # 0..0.25 random variation around gradient (helps break banding)
        [int[][]]$ColorPalette,          # fallback / alternative to gradient
        [double]$PaletteNoise = 0.10,    # lighten/darken picked palette colour

        # styling
        [double]$StrokeWidth = 0.6,
        [string]$StrokeColor = '#000000',
        [double]$StrokeOpacity = 0.12,

        #Text
        [string]$Text,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF'
    )

    # If we're in gradient mode and a palette was provided,
    # auto-pick gradient endpoints from the palette unless the user explicitly set them.
    if ($UseGradient -and $ColorPalette -and -not (
        $PSBoundParameters.ContainsKey('GradientStart') -or
        $PSBoundParameters.ContainsKey('GradientEnd')
    )) {
        # sort palette by brightness (lightest last, darkest first)
        $sorted = $ColorPalette | Sort-Object { 0.299*$_[0] + 0.587*$_[1] + 0.114*$_[2] }
        $light = $sorted[-1]; $dark = $sorted[0]

        # bottom (start) = lightest, top (end) = darkest
        $GradientStart = ('#{0:X2}{1:X2}{2:X2}' -f $light[0],$light[1],$light[2])
        $GradientEnd   = ('#{0:X2}{1:X2}{2:X2}' -f $dark[0], $dark[1], $dark[2])
    }


    # ---- helpers -------------------------------------------------------------
    function New-Point($x,$y) { [pscustomobject]@{ X=[double]$x; Y=[double]$y } }

    function Get-Circumcircle([double]$x1,[double]$y1,[double]$x2,[double]$y2,[double]$x3,[double]$y3) {
        # returns @{ CX; CY; R2 }   (center + radius^2)
        $d = 2.0 * ($x1*($y2-$y3) + $x2*($y3-$y1) + $x3*($y1-$y2))
        if ([math]::Abs($d) -lt 1e-12) { return $null } # collinear
        $x1s = $x1*$x1 + $y1*$y1
        $x2s = $x2*$x2 + $y2*$y2
        $x3s = $x3*$x3 + $y3*$y3
        $ux = ($x1s*($y2-$y3) + $x2s*($y3-$y1) + $x3s*($y1-$y2)) / $d
        $uy = ($x1s*($x3-$x2) + $x2s*($x1-$x3) + $x3s*($x2-$x1)) / $d
        $r2 = ($ux-$x1)*($ux-$x1) + ($uy-$y1)*($uy-$y1)
        return @{ CX=$ux; CY=$uy; R2=$r2 }
    }

    function EdgeKey([int]$a,[int]$b) {
    if ($a -le $b) { "$a|$b" } else { "$b|$a" }
    }

    function LerpColorHex($hexA,$hexB,[double]$t) {
        $a = Convert-HexToRGB $hexA; $b = Convert-HexToRGB $hexB
        $r = $a.Red   + ($b.Red   - $a.Red)   * $t
        $g = $a.Green + ($b.Green - $a.Green) * $t
        $b2 = $a.Blue + ($b.Blue  - $a.Blue)  * $t
        Convert-RGBToHex $r $g $b2
    }

    function Jitter01([double]$center,[double]$amount) {
        if ($amount -le 0) { return $center }
        $delta = (Get-Random -Minimum -1.0 -Maximum 1.0) * $amount
        [math]::Min(1.0,[math]::Max(0.0,$center + $delta))
    }

    # ---- sample points -------------------------------------------------------
    $pts = New-Object System.Collections.Generic.List[object]
    for ($i=0; $i -lt $PointCount; $i++) {
        $px = Get-Random -Minimum 0.0 -Maximum 1.0
        $py = Get-Random -Minimum 0.0 -Maximum 1.0
        if ($Jitter -gt 0) { $px = Jitter01 $px $Jitter; $py = Jitter01 $py $Jitter }
        $pts.Add( (New-Point ($px*$ImageWidth) ($py*$ImageHeight)) )
    }

    if ($AddBorderPoints) {
        $border = 12
        for ($i=0; $i -lt $border; $i++) {
            $t = $i/($border-1)
            $pts.Add( (New-Point ($t*$ImageWidth) 0) )
            $pts.Add( (New-Point ($t*$ImageWidth) $ImageHeight) )
        }
        for ($j=1; $j -lt ($border-1); $j++) {
            $t = $j/($border-1)
            $pts.Add( (New-Point 0 ($t*$ImageHeight)) )
            $pts.Add( (New-Point $ImageWidth ($t*$ImageHeight)) )
        }
    }

    # ---- Bowyer-Watson Delaunay ---------------------------------------------
    # Super-triangle that covers entire canvas (huge)
    $margin = [math]::Max($ImageWidth,$ImageHeight) * 10
    $iA = $pts.Count;   $pts.Add( (New-Point (-$margin) (-$margin)) )
    $iB = $pts.Count;   $pts.Add( (New-Point ( $ImageWidth + $margin) (-$margin)) )
    $iC = $pts.Count;   $pts.Add( (New-Point ($ImageWidth/2) ($ImageHeight + $margin)) )

    $tris = New-Object System.Collections.Generic.List[object]
    $tris.Add( [pscustomobject]@{ A=$iA; B=$iB; C=$iC } )

    for ($pi=0; $pi -lt $iA; $pi++) {
        $p = $pts[$pi]
        $bad = @()
        foreach ($t in $tris) {
            $pa=$pts[$t.A]; $pb=$pts[$t.B]; $pc=$pts[$t.C]
            $cc = Get-Circumcircle $pa.X $pa.Y $pb.X $pb.Y $pc.X $pc.Y
            if ($null -ne $cc) {
                $dist2 = ($cc.CX-$p.X)*($cc.CX-$p.X) + ($cc.CY-$p.Y)*($cc.CY-$p.Y)
                if ($dist2 -lt $cc.R2) { $bad += $t }
            }
        }
        if ($bad.Count -eq 0) { continue }

        # boundary polygon = edges that occur exactly once among 'bad' triangles
        $edgeCounts = @{}
        foreach ($t in $bad) {
            foreach ($ek in @(
                (EdgeKey $t.A $t.B),
                (EdgeKey $t.B $t.C),
                (EdgeKey $t.C $t.A))) 
                {
                if ($edgeCounts.ContainsKey($ek)) { $edgeCounts[$ek]++ } else { $edgeCounts[$ek] = 1 }
            }
        }
        $boundary = $edgeCounts.GetEnumerator() | Where-Object { $_.Value -eq 1 } | Select-Object -ExpandProperty Key

        # remove bad triangles
        foreach ($t in $bad) { [void]$tris.Remove($t) }

        # re-triangulate the hole with point p
        foreach ($ek in $boundary) {
            $parts = $ek -split '\|'; $a=[int]$parts[0]; $b=[int]$parts[1]
            $tris.Add( [pscustomobject]@{ A=$a; B=$b; C=$pi } )
        }
    }

    # remove any triangle touching super-triangle vertices
    $final = $tris | Where-Object { $_.A -lt $iA -and $_.B -lt $iA -and $_.C -lt $iA }

    # ---- Colouring per triangle ----------------------------------------------
    $elements = @()

    foreach ($tri in $final) {
        # Inside: foreach ($tri in $final) {  # <-- rename the loop var to avoid $t reuse
        $pa=$pts[$tri.A]; $pb=$pts[$tri.B]; $pc=$pts[$tri.C]
        # optional: diagonal mix (uncomment to try)
        # $cx = ($pa.X + $pb.X + $pc.X) / 3.0
        $cy = ($pa.Y + $pb.Y + $pc.Y) / 3.0

        if ($UseGradient) {
            # strictly double, continuous 0..1
            $blendT = [double]$cy / [double]$ImageHeight

            # optional: diagonal mix (uncomment to try)
            # $blendT = 0.5 * ($cx / [double]$ImageWidth) + 0.5 * ($cy / [double]$ImageHeight)

            # clamp and apply tiny noise (or none)
            $blendT = [math]::Min(1.0,[math]::Max(0.0,$blendT))
            if ($ColorNoise -gt 0) {
                $blendT += (Get-Random -Minimum (-$ColorNoise) -Maximum $ColorNoise)
                $blendT = [math]::Min(1.0,[math]::Max(0.0,$blendT))
            }

            # smoothstep easing to avoid perceptual banding
            $blendT = $blendT * $blendT * (3.0 - 2.0 * $blendT)

            $fill = LerpColorHex $GradientStart $GradientEnd $blendT
        } else {
            $rgb = $ColorPalette[(Get-Random -Minimum 0 -Maximum $ColorPalette.Count)]
            $k = 1.0 + (Get-Random -Minimum (-$PaletteNoise) -Maximum $PaletteNoise)
            $fill = Convert-RGBToHex ($rgb[0]*$k) ($rgb[1]*$k) ($rgb[2]*$k)
        }

        # Emit polygon WITHOUT stroke to kill hairlines
        $points = '{0},{1} {2},{3} {4},{5}' -f
            [int]$pa.X, [int]$pa.Y,
            [int]$pb.X, [int]$pb.Y,
            [int]$pc.X, [int]$pc.Y

        

        # Use the one below if you'd like a "border" around your cell
        # $elements += svg.polygon -Points $points -Fill $fill -Stroke $StrokeColor -StrokeWidth $StrokeWidth -StrokeOpacity $StrokeOpacity
        $elements += svg.polygon -Points $points -Fill $fill -Stroke $fill -StrokeWidth 0.6 -ShapeRendering 'crispEdges'   # helps some viewers

    }
    if ($Text) { $elements += (New-TextSVG -Text $Text -ImageWidth $ImageWidth -ImageHeight $ImageHeight -TextSize $TextSize -TextColor $TextColor) }
    
    return $elements
}



function New-BubbleBackgroundSVG {
    <#
    .SYNOPSIS
        Generate a bubble pattern with a gradient background.
    #>
    param(
        [Parameter(Mandatory)][int]$ImageWidth,
        [Parameter(Mandatory)][int]$ImageHeight,
        [int[][]]$ColorPalette,
        [int]$MinBubbleSize = 10,
        [int]$MaxBubbleSize = 100,
        [int]$NumBubbles = 50,
        [int]$BubbleColorAlphaMin = 50,
        [int]$BubbleColorAlphaMax = 200,
        [int]$ColorVariance = 20,
        [string]$Text,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF'
    )
    $elements = @()

    # Choose darkest and lightest colours from the palette for gradient
    $sorted = $ColorPalette | Sort-Object {
        $c = $_; (0.299*$c[0] + 0.587*$c[1] + 0.114*$c[2])
    }
    $dark = $sorted[0]; $light = $sorted[-1]
    $gradId = "bgBubble$([guid]::NewGuid().ToString('N').Substring(0,8))"
    $c1Hex = '#{0:X2}{1:X2}{2:X2}' -f $dark[0],$dark[1],$dark[2]
    $c2Hex = '#{0:X2}{1:X2}{2:X2}' -f $light[0],$light[1],$light[2]
    $elements += svg.defs @(
        svg.linearGradient -Id $gradId -X1 '0%' -Y1 '0%' -X2 '0%' -Y2 '100%' -Content @(
            svg.stop -Offset '0%'   -StopColor $c1Hex
            svg.stop -Offset '100%' -StopColor $c2Hex
        )
    )
    $elements += svg.rect -X 0 -Y 0 -Width $ImageWidth -Height $ImageHeight -Fill ("url(#$gradId)")

    # Random bubbles
    for ($i=0; $i -lt $NumBubbles; $i++) {
        $x     = Get-Random -Minimum 0 -Maximum $ImageWidth
        $y     = Get-Random -Minimum 0 -Maximum $ImageHeight
        $size  = Get-Random -Minimum $MinBubbleSize -Maximum $MaxBubbleSize
        $alpha = Get-Random -Minimum $BubbleColorAlphaMin -Maximum $BubbleColorAlphaMax
        $varR  = Get-Random -Minimum (-$ColorVariance) -Maximum $ColorVariance
        $varG  = Get-Random -Minimum (-$ColorVariance) -Maximum $ColorVariance
        $varB  = Get-Random -Minimum (-$ColorVariance) -Maximum $ColorVariance

        # Base colour is the second darkest in the palette for subtle contrast
        $base  = $sorted[1]
        $r = [math]::Min([math]::Max(0, $base[0] + $varR), 255)
        $g = [math]::Min([math]::Max(0, $base[1] + $varG), 255)
        $b = [math]::Min([math]::Max(0, $base[2] + $varB), 255)
        $hex = '#{0:X2}{1:X2}{2:X2}' -f [int]$r,[int]$g,[int]$b
        $opacity = [math]::Round($alpha / 255, 2)

        $elements += svg.circle -Cx $x -Cy $y -R ([int]($size/2)) -Fill $hex -Opacity $opacity
    }

    if ($Text) { $elements += (New-TextSVG -Text $Text -ImageWidth $ImageWidth -ImageHeight $ImageHeight -TextSize $TextSize -TextColor $TextColor) }
    return $elements
}

function New-ConcentricCirclesSVG {
    <#
    .SYNOPSIS
        Generate concentric circles across the canvas with a gradient background.
    #>
    param(
        [Parameter(Mandatory)][int]$ImageWidth,
        [Parameter(Mandatory)][int]$ImageHeight,
        [int[][]]$ColorPalette,
        [string]$Text,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF'
    )
    $elements = @()

    # Choose darkest and lightest colours for the gradient
    $sorted = $ColorPalette | Sort-Object {
        $c = $_; (0.299*$c[0] + 0.587*$c[1] + 0.114*$c[2])
    }
    $dark = $sorted[0]; $light = $sorted[-1]
    $gradId = "bgCircle$([guid]::NewGuid().ToString('N').Substring(0,8))"
    $c1Hex = '#{0:X2}{1:X2}{2:X2}' -f $dark[0],$dark[1],$dark[2]
    $c2Hex = '#{0:X2}{1:X2}{2:X2}' -f $light[0],$light[1],$light[2]
    $elements += svg.defs @(
        svg.linearGradient -Id $gradId -X1 '0%' -Y1 '0%' -X2 '0%' -Y2 '100%' -Content @(
            svg.stop -Offset '0%'   -StopColor $c1Hex
            svg.stop -Offset '100%' -StopColor $c2Hex
        )
    )
    $elements += svg.rect -X 0 -Y 0 -Width $ImageWidth -Height $ImageHeight -Fill ("url(#$gradId)")

    # Generate non-overlapping positions for circles
    $circles = @()
    function Test-Intersection {
        param([double]$x,[double]$y,[double]$r,[object[]]$existing)
        foreach ($c in $existing) {
            $dist = [math]::Sqrt(([math]::Pow($x - $c[0],2)) + ([math]::Pow($y - $c[1],2)))
            if ($dist - $r - $c[2] -lt 20) { return $true }
        }
        return $false
    }
    for ($i=0; $i -lt 100; $i++) {
        $radius = Get-Random -Minimum 30 -Maximum ([Math]::Max($ImageWidth,$ImageHeight) / 2)
        $x = Get-Random -Minimum 0 -Maximum $ImageWidth
        $y = Get-Random -Minimum 0 -Maximum $ImageHeight
        if (-not (Test-Intersection $x $y $radius $circles)) {
            $circles += ,@($x,$y,$radius)
        }
    }
    foreach ($c in $circles) {
        $x,$y,$radius = $c
        $idx = 0
        $current = [int]$radius
        while ($current -gt 0) {
            $band = Get-Random -Minimum 10 -Maximum (Get-Random -Minimum 75 -Maximum 200)
            if ($current - $band -lt 0) { $band = $current }
            $col = $ColorPalette[$idx % $ColorPalette.Count]
            $hex = '#{0:X2}{1:X2}{2:X2}' -f $col[0],$col[1],$col[2]
            $elements += svg.circle -Cx $x -Cy $y -R $current -Fill $hex
            $current -= $band
            $idx++
        }
    }
    if ($Text) { $elements += (New-TextSVG -Text $Text -ImageWidth $ImageWidth -ImageHeight $ImageHeight -TextSize $TextSize -TextColor $TextColor) }
    return $elements
}

function New-SquaresSVG {
    <#
    .SYNOPSIS
        Generate a rotated grid of coloured squares over a gradient background.
    #>
    param(
        [Parameter(Mandatory)][int]$ImageWidth,
        [Parameter(Mandatory)][int]$ImageHeight,
        [int[][]]$ColorPalette,
        [string]$Text,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF'
    )
    $elements = @()

    # Gradient colours: darkest and lightest for contrast
    $sorted = $ColorPalette | Sort-Object {
        $c = $_; (0.299*$c[0] + 0.587*$c[1] + 0.114*$c[2])
    }
    $dark = $sorted[0]; $light = $sorted[-1]
    $gradId = "bgSquares$([guid]::NewGuid().ToString('N').Substring(0,8))"
    $c1Hex = '#{0:X2}{1:X2}{2:X2}' -f $dark[0],$dark[1],$dark[2]
    $c2Hex = '#{0:X2}{1:X2}{2:X2}' -f $light[0],$light[1],$light[2]
    $elements += svg.defs @(
        svg.linearGradient -Id $gradId -X1 '0%' -Y1 '0%' -X2 '0%' -Y2 '100%' -Content @(
            svg.stop -Offset '0%'   -StopColor $c1Hex
            svg.stop -Offset '100%' -StopColor $c2Hex
        )
    )
    $elements += svg.rect -X 0 -Y 0 -Width $ImageWidth -Height $ImageHeight -Fill ("url(#$gradId)")

    # Rotated grid of squares
    $rand = [Random]::new()
    $angle = 5 * $rand.Next(0,18)
    $minSide = 16
    $maxSide = [Math]::Min($ImageWidth,$ImageHeight) / 2
    $side = $rand.Next($minSide,[int]$maxSide)
    $rects = @()
    for ($x = -$ImageWidth; $x -le $ImageWidth; $x += $side) {
        for ($y = -$ImageHeight; $y -le $ImageHeight; $y += $side) {
            $colVals = $ColorPalette[$rand.Next(0,$ColorPalette.Length)]
            $hex = '#{0:X2}{1:X2}{2:X2}' -f $colVals[0],$colVals[1],$colVals[2]
            $rects += (svg.rect -X ($x-1) -Y ($y-1) -Width ($side+2) -Height ($side+2) -Fill $hex)
        }
    }
    $cx = $ImageWidth / 2
    $cy = $ImageHeight / 2
    $elements += (svg.g -Transform "translate($cx,$cy) rotate($angle)" -Content $rects)
    if ($Text) { $elements += (New-TextSVG -Text $Text -ImageWidth $ImageWidth -ImageHeight $ImageHeight -TextSize $TextSize -TextColor $TextColor) }
    return $elements
}

function New-StripesSVG {
    <#
    .SYNOPSIS
        Generate diagonal stripes over a gradient background.
    #>
    param(
        [Parameter(Mandatory)][int]$ImageWidth,
        [Parameter(Mandatory)][int]$ImageHeight,
        [int[][]]$ColorPalette,
        [string]$Text,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF'
    )
    $elements = @()

    # Gradient colours: darkest and lightest
    $sorted = $ColorPalette | Sort-Object {
        $c = $_; (0.299*$c[0] + 0.587*$c[1] + 0.114*$c[2])
    }
    $dark = $sorted[0]; $light = $sorted[-1]
    $gradId = "bgStripes$([guid]::NewGuid().ToString('N').Substring(0,8))"
    $c1Hex = '#{0:X2}{1:X2}{2:X2}' -f $dark[0],$dark[1],$dark[2]
    $c2Hex = '#{0:X2}{1:X2}{2:X2}' -f $light[0],$light[1],$light[2]
    $elements += svg.defs @(
        svg.linearGradient -Id $gradId -X1 '0%' -Y1 '0%' -X2 '0%' -Y2 '100%' -Content @(
            svg.stop -Offset '0%'   -StopColor $c1Hex
            svg.stop -Offset '100%' -StopColor $c2Hex
        )
    )
    $elements += svg.rect -X 0 -Y 0 -Width $ImageWidth -Height $ImageHeight -Fill ("url(#$gradId)")

    # Build stripes then rotate
    $rand = [Random]::new()
    $angle = 5 * $rand.Next(1,18)
    if ($rand.Next(0,2) -eq 1) { $angle = -$angle }
    # Generate random stripe widths for each palette index
    $stripeWidths = for ($i=0; $i -lt $ColorPalette.Length; $i++) { $rand.Next(16,256) }
    $stripeIndex = 0
    $maxDim = [Math]::Max($ImageWidth,$ImageHeight)
    $x = - ($maxDim * 2)
    $stripes = @()
    while ($x -lt ($maxDim * 2)) {
        $colVals = $ColorPalette[$stripeIndex]
        $hex = '#{0:X2}{1:X2}{2:X2}' -f $colVals[0],$colVals[1],$colVals[2]
        $w = $stripeWidths[$stripeIndex]
        $stripes += svg.rect -X $x -Y (-$maxDim * 2) -Width $w -Height ($maxDim * 4) -Fill $hex
        $x += $w
        $stripeIndex = ($stripeIndex + 1) % $ColorPalette.Length
    }
    $cx = $ImageWidth / 2
    $cy = $ImageHeight / 2
    $elements += (svg.g -Transform "translate($cx,$cy) rotate($angle)" -Content $stripes)
    if ($Text) { $elements += (New-TextSVG -Text $Text -ImageWidth $ImageWidth -ImageHeight $ImageHeight -TextSize $TextSize -TextColor $TextColor) }
    return $elements
}

function New-WavesSVG {
    <#
    .SYNOPSIS
        Generate layered sine waves.  Can use gradient blend or palette cycling.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][int]$ImageWidth,
        [Parameter(Mandatory)][int]$ImageHeight,
        [int]$SegmentsCount = 200,
        [int]$LayersCount = (Get-Random -Minimum 3 -Maximum 12),
        [switch]$Gradient,
        [int[][]]$ColorPalette,
        [string]$Text,
        [int]$TextSize = 40,
        [string]$TextColor = '#FFFFFF'
    )
    $elements = @()
    # Helpers for colour interpolation
    function Convert-RGB { param([int[]]$rgb) [pscustomobject]@{ R=$rgb[0]; G=$rgb[1]; B=$rgb[2] } }
    function Brightness { param($c) [int](0.299*$c.R + 0.587*$c.G + 0.114*$c.B) }
    function LerpColor {
        param($a,$b,[double]$t)
        [pscustomobject]@{
            R = [int]($a.R + ($b.R - $a.R) * $t)
            G = [int]($a.G + ($b.G - $a.G) * $t)
            B = [int]($a.B + ($b.B - $a.B) * $t)
        }
    }
    # If LayersCount wasn't passed explicitly, randomise between 4 and 12 for variety
    if (-not $PSBoundParameters.ContainsKey('LayersCount')) {
        $LayersCount = Get-Random -Minimum 4 -Maximum 12
    }

    # Determine a base wavelength based on image width and a random divisor between 8 and 20.
    # A larger divisor produces a shorter wavelength and therefore more oscillations across the
    # canvas.  Increasing this range introduces more waves per line by default while still
    # allowing occasional longer wavelengths when a smaller divisor is chosen.
    $wavelength = [int]($ImageWidth / (Get-Random -Minimum 8 -Maximum 20))

    # The starting offset for the first wave and an incremental shift per layer.
    $offsetBase      = Get-Random -Minimum 50 -Maximum 360
    $offsetIncrement = Get-Random -Minimum 10 -Maximum 70

    # Fill the entire background with the colour of the topmost wave so that no transparent
    # regions appear above the waves.  This rectangle is behind all paths and will only
    # be visible where no wave is drawn (i.e., at the very top of the image).
    if ($Gradient) {
        # Use the lightest and darkest colours for the gradient.  Compute the final colour at
        # t=1 (darkest).  The background colour will match this final gradient colour so that
        # the top area of the image reflects the end of the gradient.
        $sortedPaletteForBase = $ColorPalette | Sort-Object {
            $c = $_; (0.299*$c[0] + 0.587*$c[1] + 0.114*$c[2])
        }
        $lightRGB  = Convert-RGB $sortedPaletteForBase[-1]
        $darkRGB   = Convert-RGB $sortedPaletteForBase[0]
        # For gradient mode, the background should be the darkest colour (the end of the gradient).
        # We do not darken further so that the top area displays the true final colour.
        $endColour = LerpColor $lightRGB $darkRGB 1.0
        $fillBase = '#{0:X2}{1:X2}{2:X2}' -f $endColour.R,$endColour.G,$endColour.B
    } else {
        $idx = ($LayersCount - 1) % $ColorPalette.Length
        $colVals = $ColorPalette[$idx]
        # Darken palette base colour slightly to avoid matching the last wave exactly
        $bgR = [math]::Max(0, $colVals[0] - 10)
        $bgG = [math]::Max(0, $colVals[1] - 10)
        $bgB = [math]::Max(0, $colVals[2] - 10)
        $fillBase = '#{0:X2}{1:X2}{2:X2}' -f $bgR,$bgG,$bgB
    }
    $elements += svg.rect -X 0 -Y 0 -Width $ImageWidth -Height $ImageHeight -Fill $fillBase

    # Prepare values used across all layers
    $randGen = [Random]::new()
    $spacing = $ImageHeight / $LayersCount

    # -------------------------------------------------------------------------
    # Base amplitude determination
    #
    # The base amplitude will be computed at the start
    # and then applied to each wave layer with only minor variations.  To honour
    # that, we determine a base amplitude here using both the initial
    # wavelength and the vertical spacing between layers.  The larger of the two
    # candidate amplitudes is chosen, ensuring the waves are tall enough to
    # overlap and look organic.  Individual layers will later scale this base
    # amplitude slightly (e.g. +-20%) to introduce small but noticeable
    # differences without diverging wildly from the overall look.

    # Calculate an amplitude derived from the initial wavelength.  Use a
    # relatively small divisor to ensure the base amplitude is not too small.
    $baseAmpDiv = Get-Random -Minimum 4 -Maximum 9
    $ampFromWavelength = [int]($wavelength / $baseAmpDiv)
    # Calculate an amplitude based on vertical spacing between layers.  Use a
    # random ratio (40%-100%) of the spacing to encourage overlap between
    # adjacent waves.
    $baseRatio = 0.4 + ($randGen.NextDouble() * 0.6)
    $ampFromSpacing = [int]($spacing * $baseRatio)
    # Choose the larger amplitude as the base.  Ensure a minimum of 4 pixels.
    $baseAmplitude = [math]::Max([math]::Max($ampFromWavelength, $ampFromSpacing), 4)
    # Generate each wave layer
    for ($layer = 0; $layer -lt $LayersCount; $layer++) {
        # Normalised position for gradient blending.  We offset by one to reserve space for the
        # final background colour (t = 1).  This ensures the topmost wave colour is not identical
        # to the background.
        $t = ($layer + 1) / [double]($LayersCount + 1)

        # Determine fill colour: gradient between lightest and darkest colours or cycling palette
        if ($Gradient) {
            # Choose lightest and darkest colours for interpolation.  We want the bottom waves to be
            # lighter and the top waves to be darker.  Sorting by brightness allows us to find
            # consistent light/dark endpoints across the palette.
            $sorted = $ColorPalette | Sort-Object {
                $c = $_; (0.299*$c[0] + 0.587*$c[1] + 0.114*$c[2])
            }
            $lightest = Convert-RGB $sorted[0]
            $darkest  = Convert-RGB $sorted[-1]
            $lc = LerpColor $lightest $darkest $t
            $fill = '#{0:X2}{1:X2}{2:X2}' -f $lc.R,$lc.G,$lc.B
        } else {
            $colVals = $ColorPalette[$layer % $ColorPalette.Length]
            $fill = '#{0:X2}{1:X2}{2:X2}' -f $colVals[0],$colVals[1],$colVals[2]
        }

        # Vertical position of the midline for this wave
        $offsetY = [int](($layer + 0.5) * ($ImageHeight / $LayersCount))
        # Horizontal shift for this layer increases with the layer index
        $layerOffset = Get-Random -Minimum 1 -Maximum ($offsetBase + $offsetIncrement * $layer)

        # Choose a random divisor for the wavelength to significantly vary wave counts per line.
        # Lower divisors produce longer wavelengths (fewer peaks); higher divisors produce shorter
        # wavelengths (more peaks).  Increasing the minimum and maximum values here pushes the
        # average divisor upward, which results in more oscillations across the width of the
        # image.  Divisors now range from 8 to 20 to allow up to ~20 waves across the canvas.
        $layerDiv = Get-Random -Minimum 8 -Maximum 20
        $layerWavelength = [int]($ImageWidth / $layerDiv)
        # Constrain the wavelength to a minimum of 8 pixels to avoid extremely dense waves
        # that would be indistinguishable at typical resolutions.
        if ($layerWavelength -lt 8) { $layerWavelength = 8 }

        # Determine amplitude for this layer by applying a small random variation to the
        # previously computed base amplitude.  The variation factor ranges from
        # 0.8 to 1.2 (+-20%), producing subtle differences between layers without
        # deviating significantly.  Ensure the result is at least 4 pixels.
        $varFactor = 0.8 + ($randGen.NextDouble() * 0.4)
        $layerAmplitude = [int]($baseAmplitude * $varFactor)
        if ($layerAmplitude -lt 4) { $layerAmplitude = 4 }

        # Build a closed path approximating a sine wave band
        $points = New-Object System.Collections.Generic.List[string]
        $points.Add("M 0 $ImageHeight")
        $points.Add("L 0 $offsetY")
        for ($i=0; $i -le $SegmentsCount; $i++) {
            $x = [int]($i * ($ImageWidth / $SegmentsCount))
            # Sine function uses the layer's horizontal offset, per-layer amplitude, and per-layer wavelength
            $y = [int]($offsetY + ($layerAmplitude * [math]::Sin(($layerOffset + $x) / $layerWavelength)))
            $points.Add("L $x $y")
        }
        $points.Add("L $ImageWidth $offsetY")
        $points.Add("L $ImageWidth $ImageHeight")
        $points.Add("Z")
        $d = ($points -join ' ')
        $elements += svg.path -D $d -Fill $fill
    }
    if ($Text) { $elements += (New-TextSVG -Text $Text -ImageWidth $ImageWidth -ImageHeight $ImageHeight -TextSize $TextSize -TextColor $TextColor) }
    return $elements
}


<#
              _\|/_
               /|\
                |
                |
               _|_
 (oh wee, an ascii palm tree )
     PixelPoSH  x  PSSVG

You have reached the end, good job! I see you like PowerShell too!
#>

#endregion Helper functions